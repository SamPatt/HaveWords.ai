!function(e,r){if("object"==typeof exports&&"object"==typeof module)module.exports=r();else if("function"==typeof define&&define.amd)define([],r);else{var t=r();for(var l in t)("object"==typeof exports?exports:e)[l]=t[l]}}(this,(()=>(()=>{"use strict";var e={95:(e,r,t)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.DiceRoller=void 0;const l=t(51);r.DiceRoller=class{constructor(e,r=1e3){this.randFunction=Math.random,this.maxRollCount=1e3,e&&(this.randFunction=e),this.maxRollCount=r}parse(e){return l.parse(e)}roll(e){const r=l.parse(e);return this.rollType(r)}rollValue(e){return this.roll(e).value}rollParsed(e){return this.rollType(e)}rollType(e){let r;switch(e.type){case"diceExpression":r=this.rollDiceExpr(e);break;case"group":r=this.rollGroup(e);break;case"die":r=this.rollDie(e);break;case"expression":r=this.rollExpression(e);break;case"mathfunction":r=this.rollFunction(e);break;case"inline":r=this.rollType(e.expr);break;case"number":r=Object.assign(Object.assign({},e),{success:null,successes:0,failures:0,valid:!0,order:0});break;default:throw new Error(`Unable to render ${e.type}`)}return e.label&&(r.label=e.label),r}rollDiceExpr(e){const r=this.rollType(e.head),t=[r],l=[],o=e.ops.reduce(((e,r,o)=>{const s=this.rollType(r.tail);switch(s.order=o,t.push(s),l.push(r.op),r.op){case"+":return e+s.value;case"-":return e-s.value;default:return e}}),r.value);return{dice:t,ops:l,success:null,successes:0,failures:0,type:"diceexpressionroll",valid:!0,value:o,order:0}}rollGroup(e){let r=e.rolls.map(((e,r)=>Object.assign(Object.assign({},this.rollType(e)),{order:r}))),t=0,l=0,o=!1;if(e.mods){const s=e.mods,n=e=>(o=s.some((e=>["failure","success"].includes(e.type))),e=s.reduce(((e,r)=>this.applyGroupMod(e,r)),e),o&&(e=e.map((e=>(t+=e.successes,l+=e.failures,e.value=e.successes-e.failures,e.success=e.value>0,e)))),e);if(1===r.length&&["die","diceexpressionroll"].includes(r[0].type)){const e=r[0];let t="die"===e.type?e.rolls:e.dice.filter((e=>"number"!==e.type)).reduce(((e,r)=>[...e,..."die"===r.type?r.rolls:r.dice]),[]);t=n(t),e.value=t.reduce(((e,r)=>r.valid?e+r.value:e),0)}else r=n(r)}const s=r.reduce(((e,r)=>r.valid?e+r.value:e),0);return{dice:r,success:o?s>0:null,successes:t,failures:l,type:"grouproll",valid:!0,value:s,order:0}}rollDie(e){const r=this.rollType(e.count);if(r.value>this.maxRollCount)throw new Error("Entered number of dice too large.");let t,l;"fate"===e.die.type?(l={type:"fate",success:null,successes:0,failures:0,valid:!1,value:0,order:0},t=Array.from({length:r.value},((e,r)=>this.generateFateRoll(r)))):(l=this.rollType(e.die),t=Array.from({length:r.value},((e,r)=>this.generateDiceRoll(l.value,r)))),e.mods&&(t=e.mods.reduce(((e,r)=>this.applyMod(e,r)),t));let o=0,s=0;e.targets&&(t=e.targets.reduce(((e,r)=>this.applyMod(e,r)),t).map((e=>(o+=e.successes,s+=e.failures,e.value=e.successes-e.failures,e.success=e.value>0,e))));let n=!1,u=0;if(e.match){const r=e.match,l=t.reduce(((e,r)=>e.set(r.roll,(e.get(r.roll)||0)+1)),new Map),o=new Set(Array.from(l.entries()).filter((([e,t])=>t>=r.min.value)).filter((([e])=>!(r.mod&&r.expr)||this.successTest(r.mod,this.rollType(r.expr).value,e))).map((([e])=>e)));t.filter((e=>o.has(e.roll))).forEach((e=>e.matched=!0)),r.count&&(n=!0,u=o.size)}e.sort&&(t=this.applySort(t,e.sort));const a=t.reduce(((e,r)=>r.valid?e+r.value:e),0);return{count:r,die:l,rolls:t,success:e.targets?a>0:null,successes:o,failures:s,type:"die",valid:!0,value:n?u:a,order:0,matched:n}}rollExpression(e){const r=this.rollType(e.head),t=[r],l=[],o=e.ops.reduce(((e,r)=>{const o=this.rollType(r.tail);switch(t.push(o),l.push(r.op),r.op){case"+":return e+o.value;case"-":return e-o.value;case"*":return e*o.value;case"/":return e/o.value;case"%":return e%o.value;case"**":return e**o.value;default:return e}}),r.value);return{dice:t,ops:l,success:null,successes:0,failures:0,type:"expressionroll",valid:!0,value:o,order:0}}rollFunction(e){const r=this.rollType(e.expr);let t;switch(e.op){case"floor":t=Math.floor(r.value);break;case"ceil":t=Math.ceil(r.value);break;case"round":t=Math.round(r.value);break;case"abs":t=Math.abs(r.value);break;default:t=r.value}return{expr:r,op:e.op,success:null,successes:0,failures:0,type:"mathfunction",valid:!0,value:t,order:0}}applyGroupMod(e,r){return this.getGroupModMethod(r)(e)}getGroupModMethod(e){const r=e=>e.value;switch(e.type){case"success":return this.getSuccessMethod(e,r);case"failure":return this.getFailureMethod(e,r);case"keep":return this.getKeepMethod(e,r);case"drop":return this.getDropMethod(e,r);default:throw new Error(`Mod ${e.type} is not recognised`)}}applyMod(e,r){return this.getModMethod(r)(e)}getModMethod(e){const r=e=>e.roll;switch(e.type){case"success":return this.getSuccessMethod(e,r);case"failure":return this.getFailureMethod(e,r);case"crit":return this.getCritSuccessMethod(e,r);case"critfail":return this.getCritFailureMethod(e,r);case"keep":return t=>this.getKeepMethod(e,r)(t).sort(((e,r)=>e.order-r.order));case"drop":return t=>this.getDropMethod(e,r)(t).sort(((e,r)=>e.order-r.order));case"explode":return this.getExplodeMethod(e);case"compound":return this.getCompoundMethod(e);case"penetrate":return this.getPenetrateMethod(e);case"reroll":return this.getReRollMethod(e);case"rerollOnce":return this.getReRollOnceMethod(e);default:throw new Error(`Mod ${e.type} is not recognised`)}}applySort(e,r){return e.sort(((e,t)=>r.asc?e.roll-t.roll:t.roll-e.roll)),e.forEach(((e,r)=>e.order=r)),e}getCritSuccessMethod(e,r){const t=this.rollType(e.expr);return l=>l.map((l=>{if(!l.valid)return l;if("roll"!==l.type)return l;if(l.success)return l;const o=l;return this.successTest(e.mod,t.value,r(l))?o.critical="success":"success"===o.critical&&(o.critical=null),l}))}getCritFailureMethod(e,r){const t=this.rollType(e.expr);return l=>l.map((l=>{if(!l.valid)return l;if("roll"!==l.type)return l;if(l.success)return l;const o=l;return this.successTest(e.mod,t.value,r(l))?o.critical="failure":"failure"===o.critical&&(o.critical=null),l}))}getSuccessMethod(e,r){const t=this.rollType(e.expr);return l=>l.map((l=>l.valid?(this.successTest(e.mod,t.value,r(l))&&(l.successes+=1),l):l))}getFailureMethod(e,r){const t=this.rollType(e.expr);return l=>l.map((l=>l.valid?(this.successTest(e.mod,t.value,r(l))&&(l.failures+=1),l):l))}getKeepMethod(e,r){const t=this.rollType(e.expr);return l=>{if(0===l.length)return l;l=l.sort(((t,l)=>"l"===e.highlow?r(l)-r(t):r(t)-r(l))).sort(((e,r)=>(e.valid?1:0)-(r.valid?1:0)));const o=Math.max(Math.min(t.value,l.length),0);let s=0,n=0;const u=l.reduce(((e,r)=>(r.valid?1:0)+e),0)-o;for(;n<l.length&&s<u;)l[n].valid&&(l[n].valid=!1,l[n].drop=!0,s++),n++;return l}}getDropMethod(e,r){const t=this.rollType(e.expr);return l=>{l=l.sort(((t,l)=>"h"===e.highlow?r(l)-r(t):r(t)-r(l)));const o=Math.max(Math.min(t.value,l.length),0);let s=0,n=0;for(;n<l.length&&s<o;)l[n].valid&&(l[n].valid=!1,l[n].drop=!0,s++),n++;return l}}getExplodeMethod(e){const r=e.target?this.rollType(e.target.value):null;return t=>{const l=r?t=>this.successTest(e.target.mod,r.value,t.roll):e=>this.successTest("=","fateroll"===e.type?1:e.die,e.roll);if("roll"===t[0].type&&l({roll:1})&&l({roll:t[0].die}))throw new Error("Invalid reroll target");for(let e=0;e<t.length;e++){let r=t[e];r.order=e;let o=0;for(;l(r)&&o++<1e3;){r.explode=!0;const l=this.reRoll(r,++e);t.splice(e,0,l),r=l}}return t}}getCompoundMethod(e){const r=e.target?this.rollType(e.target.value):null;return t=>{const l=r?t=>this.successTest(e.target.mod,r.value,t.roll):e=>this.successTest("=","fateroll"===e.type?1:e.die,e.roll);if("roll"===t[0].type&&l({roll:1})&&l({roll:t[0].die}))throw new Error("Invalid reroll target");for(let e=0;e<t.length;e++){let r=t[e],o=r.roll,s=0;for(;l(r)&&s++<1e3;){r.explode=!0;const t=this.reRoll(r,e+1);o+=t.roll,r=t}t[e].value=o,t[e].roll=o}return t}}getPenetrateMethod(e){const r=e.target?this.rollType(e.target.value):null;return t=>{const l=r?t=>this.successTest(e.target.mod,r.value,t.roll):e=>this.successTest("=","fateroll"===e.type?1:e.die,e.roll);if(r&&"roll"===t[0].type&&l(t[0])&&this.successTest(e.target.mod,r.value,1))throw new Error("Invalid reroll target");for(let e=0;e<t.length;e++){let r=t[e];r.order=e;let o=0;for(;l(r)&&o++<1e3;){r.explode=!0;const l=this.reRoll(r,++e);l.value-=1,t.splice(e,0,l),r=l}}return t}}getReRollMethod(e){const r=e.target?this.successTest.bind(null,e.target.mod,this.rollType(e.target.value).value):this.successTest.bind(null,"=",1);return e=>{if("roll"===e[0].type&&r(1)&&r(e[0].die))throw new Error("Invalid reroll target");for(let t=0;t<e.length;t++)for(;r(e[t].roll);){e[t].reroll=!0,e[t].valid=!1;const r=this.reRoll(e[t],t+1);e.splice(++t,0,r)}return e}}getReRollOnceMethod(e){const r=e.target?this.successTest.bind(null,e.target.mod,this.rollType(e.target.value).value):this.successTest.bind(null,"=",1);return e=>{if("roll"===e[0].type&&r(1)&&r(e[0].die))throw new Error("Invalid reroll target");for(let t=0;t<e.length;t++)if(r(e[t].roll)){e[t].reroll=!0,e[t].valid=!1;const r=this.reRoll(e[t],t+1);e.splice(++t,0,r)}return e}}successTest(e,r,t){switch(e){case">":return t>=r;case"<":return t<=r;default:return t==r}}reRoll(e,r){switch(e.type){case"roll":return this.generateDiceRoll(e.die,r);case"fateroll":return this.generateFateRoll(r);default:throw new Error(`Cannot do a reroll of a ${e.type}.`)}}generateDiceRoll(e,r){const t=parseInt((this.randFunction()*e).toFixed(),10)+1;return{critical:t===e?"success":1===t?"failure":null,die:e,matched:!1,order:r,roll:t,success:null,successes:0,failures:0,type:"roll",valid:!0,value:t}}generateFateRoll(e){const r=Math.floor(3*this.randFunction())-1;return{matched:!1,order:e,roll:r,success:null,successes:0,failures:0,type:"fateroll",valid:!0,value:r}}}},619:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0}),r.DiscordRollRenderer=void 0,r.DiscordRollRenderer=class{render(e){return this.doRender(e,!0)}doRender(e,r=!1){let t="";switch(e.type){case"diceexpressionroll":t=this.renderGroupExpr(e);break;case"grouproll":t=this.renderGroup(e);break;case"die":t=this.renderDie(e);break;case"expressionroll":t=this.renderExpression(e);break;case"mathfunction":t=this.renderFunction(e);break;case"roll":return this.renderRoll(e);case"fateroll":return this.renderFateRoll(e);case"number":const r=e.label?` (${e.label})`:"";return`${e.value}${r}`;case"fate":return"F";default:throw new Error("Unable to render")}return e.valid||(t="~~"+t.replace(/~~/g,"")+"~~"),r?this.stripBrackets(t):e.label?`(${e.label}: ${t})`:t}renderGroup(e){const r=[];for(const t of e.dice)r.push(this.doRender(t));return r.length>1?`{ ${r.join(" + ")} } = ${e.value}`:`{ ${this.stripBrackets(r[0])} } = ${e.value}`}renderGroupExpr(e){const r=[];for(const t of e.dice)r.push(this.doRender(t));return r.length>1?`(${r.join(" + ")} = ${e.value})`:r[0]}renderDie(e){const r=[];for(const t of e.rolls)r.push(this.doRender(t));let t=`${r.join(", ")}`;["number","fate"].includes(e.die.type)&&"number"===e.count.type||(t+=`[*Rolling: ${this.doRender(e.count)}d${this.doRender(e.die)}*]`);const l=e.matched?" Match"+(1===e.value?"":"es"):"";return t+=` = ${e.value}${l}`,`(${t})`}renderExpression(e){if(e.dice.length>1){const r=[];for(let t=0;t<e.dice.length-1;t++)r.push(this.doRender(e.dice[t])),r.push(e.ops[t]);return r.push(this.doRender(e.dice.slice(-1)[0])),r.push("="),r.push(e.value+""),`(${r.join(" ")})`}return"number"===e.dice[0].type?e.value+"":this.doRender(e.dice[0])}renderFunction(e){const r=this.doRender(e.expr);return`(${e.op}${this.addBrackets(r)} = ${e.value})`}addBrackets(e){return e.startsWith("(")||(e=`(${e}`),e.endsWith(")")||(e=`${e})`),e}stripBrackets(e){return e.startsWith("(")&&(e=e.substring(1)),e.endsWith(")")&&(e=e.substring(0,e.length-1)),e}renderRoll(e){let r=`${e.roll}`;return e.valid?e.success&&1===e.value?r=`**${e.roll}**`:e.success&&-1===e.value?r=`*${e.roll}*`:e.success||"success"!==e.critical?e.success||"failure"!==e.critical||(r=`*${e.roll}*`):r=`**${e.roll}**`:r=`~~${e.roll}~~`,e.matched&&(r=`__${r}__`),r}renderFateRoll(e){const r=0===e.roll?"0":e.roll>0?"+":"-";let t=`${e.roll}`;return e.valid?e.success&&1===e.value?t=`**${r}**`:e.success&&-1===e.value&&(t=`*${r}*`):t=`~~${r}~~`,e.matched&&(t=`__${t}__`),t}}},607:function(e,r,t){var l=this&&this.__createBinding||(Object.create?function(e,r,t,l){void 0===l&&(l=t);var o=Object.getOwnPropertyDescriptor(r,t);o&&!("get"in o?!r.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return r[t]}}),Object.defineProperty(e,l,o)}:function(e,r,t,l){void 0===l&&(l=t),e[l]=r[t]}),o=this&&this.__exportStar||function(e,r){for(var t in e)"default"===t||Object.prototype.hasOwnProperty.call(r,t)||l(r,e,t)};Object.defineProperty(r,"__esModule",{value:!0}),o(t(95),r),o(t(604),r),o(t(234),r),o(t(619),r),o(t(54),r)},604:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},234:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},54:(e,r)=>{Object.defineProperty(r,"__esModule",{value:!0})},51:e=>{function r(e,t,l,o){this.message=e,this.expected=t,this.found=l,this.location=o,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,r)}!function(e,r){function t(){this.constructor=e}t.prototype=r.prototype,e.prototype=new t}(r,Error),r.buildMessage=function(e,r){var t={literal:function(e){return'"'+o(e.text)+'"'},class:function(e){var r,t="";for(r=0;r<e.parts.length;r++)t+=e.parts[r]instanceof Array?s(e.parts[r][0])+"-"+s(e.parts[r][1]):s(e.parts[r]);return"["+(e.inverted?"^":"")+t+"]"},any:function(e){return"any character"},end:function(e){return"end of input"},other:function(e){return e.description}};function l(e){return e.charCodeAt(0).toString(16).toUpperCase()}function o(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+l(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+l(e)}))}function s(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(function(e){return"\\x0"+l(e)})).replace(/[\x10-\x1F\x7F-\x9F]/g,(function(e){return"\\x"+l(e)}))}return"Expected "+function(e){var r,l,o,s=new Array(e.length);for(r=0;r<e.length;r++)s[r]=(o=e[r],t[o.type](o));if(s.sort(),s.length>0){for(r=1,l=1;r<s.length;r++)s[r-1]!==s[r]&&(s[l]=s[r],l++);s.length=l}switch(s.length){case 1:return s[0];case 2:return s[0]+" or "+s[1];default:return s.slice(0,-1).join(", ")+", or "+s[s.length-1]}}(e)+" but "+function(e){return e?'"'+o(e)+'"':"end of input"}(r)+" found."},e.exports={SyntaxError:r,parse:function(e,t){t=void 0!==t?t:{};var l,o={},s={start:Me},n=Me,u={type:"any"},a=ye("[[",!1),c=ye("]]",!1),i=function(e,r){return r&&(e.label=r),e},d=">",h=ye(">",!1),p="<",f=ye("<",!1),v="=",g=ye("=",!1),y=ye("f",!1),m=ye("cs",!1),b=ye("cf",!1),x=ye("m",!1),A=ye("t",!1),C=ye("k",!1),M=ye("l",!1),R=ye("h",!1),w=ye("d",!1),T=ye("{",!1),$=ye(",",!1),E=ye("}",!1),F="+",k=ye("+",!1),_=ye("s",!1),j=ye("a",!1),O=ye("!",!1),D=ye("!!",!1),S=ye("!p",!1),P=ye("r",!1),G=ye("ro",!1),I=ye("F",!1),B=ye("%",!1),W=ye("(",!1),K=ye(")",!1),U=ye("-",!1),z=function(e,r){return 0==r.length?e:{head:e,type:"expression",ops:r.map((e=>({type:"math",op:e[1],tail:e[3]})))}},V=ye("*",!1),q=ye("/",!1),H="**",J=ye("**",!1),L="floor",N=ye("floor",!1),Q="ceil",X=ye("ceil",!1),Y="round",Z=ye("round",!1),ee=ye("abs",!1),re=be("integer"),te=/^[0-9]/,le=me([["0","9"]],!1,!1),oe=ye("[",!1),se=/^[^\]]/,ne=me(["]"],!0,!1),ue=ye("]",!1),ae=be("whitespace"),ce=/^[ \t\n\r]/,ie=me([" ","\t","\n","\r"],!1,!1),de=0,he=0,pe=[{line:1,column:1}],fe=0,ve=[],ge=0;if("startRule"in t){if(!(t.startRule in s))throw new Error("Can't start parsing from rule \""+t.startRule+'".');n=s[t.startRule]}function ye(e,r){return{type:"literal",text:e,ignoreCase:r}}function me(e,r,t){return{type:"class",parts:e,inverted:r,ignoreCase:t}}function be(e){return{type:"other",description:e}}function xe(r){var t,l=pe[r];if(l)return l;for(t=r-1;!pe[t];)t--;for(l={line:(l=pe[t]).line,column:l.column};t<r;)10===e.charCodeAt(t)?(l.line++,l.column=1):l.column++,t++;return pe[r]=l,l}function Ae(e,r){var t=xe(e),l=xe(r);return{start:{offset:e,line:t.line,column:t.column},end:{offset:r,line:l.line,column:l.column}}}function Ce(e){de<fe||(de>fe&&(fe=de,ve=[]),ve.push(e))}function Me(){var r,t,l,s,n,a;if(r=de,(t=We())!==o){for(l=[],e.length>de?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(u));s!==o;)l.push(s),e.length>de?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(u));l!==o?(he=r,a=l,(n=t).root=!0,a&&(n.label=a.join("")),r=t=n):(de=r,r=o)}else de=r,r=o;return r}function Re(){var r,t,l;return r=de,62===e.charCodeAt(de)?(t=d,de++):(t=o,0===ge&&Ce(h)),t===o&&(60===e.charCodeAt(de)?(t=p,de++):(t=o,0===ge&&Ce(f)),t===o&&(61===e.charCodeAt(de)?(t=v,de++):(t=o,0===ge&&Ce(g)))),t!==o&&(l=Be())!==o?(he=r,r=t={type:"success",mod:t,expr:l}):(de=r,r=o),r}function we(){var r,t,l,s;return r=de,102===e.charCodeAt(de)?(t="f",de++):(t=o,0===ge&&Ce(y)),t!==o?(62===e.charCodeAt(de)?(l=d,de++):(l=o,0===ge&&Ce(h)),l===o&&(60===e.charCodeAt(de)?(l=p,de++):(l=o,0===ge&&Ce(f)),l===o&&(61===e.charCodeAt(de)?(l=v,de++):(l=o,0===ge&&Ce(g)))),l===o&&(l=null),l!==o&&(s=Be())!==o?(he=r,r=t={type:"failure",mod:l,expr:s}):(de=r,r=o)):(de=r,r=o),r}function Te(){var r,t,l,s;return r=de,"cs"===e.substr(de,2)?(t="cs",de+=2):(t=o,0===ge&&Ce(m)),t!==o?(62===e.charCodeAt(de)?(l=d,de++):(l=o,0===ge&&Ce(h)),l===o&&(60===e.charCodeAt(de)?(l=p,de++):(l=o,0===ge&&Ce(f)),l===o&&(61===e.charCodeAt(de)?(l=v,de++):(l=o,0===ge&&Ce(g)))),l===o&&(l=null),l!==o&&(s=Be())!==o?(he=r,r=t={type:"crit",mod:l,expr:s}):(de=r,r=o)):(de=r,r=o),r}function $e(){var r,t,l,s;return r=de,"cf"===e.substr(de,2)?(t="cf",de+=2):(t=o,0===ge&&Ce(b)),t!==o?(62===e.charCodeAt(de)?(l=d,de++):(l=o,0===ge&&Ce(h)),l===o&&(60===e.charCodeAt(de)?(l=p,de++):(l=o,0===ge&&Ce(f)),l===o&&(61===e.charCodeAt(de)?(l=v,de++):(l=o,0===ge&&Ce(g)))),l===o&&(l=null),l!==o&&(s=Be())!==o?(he=r,r=t={type:"critfail",mod:l,expr:s}):(de=r,r=o)):(de=r,r=o),r}function Ee(){var r,t,l,s;return r=de,107===e.charCodeAt(de)?(t="k",de++):(t=o,0===ge&&Ce(C)),t!==o?(108===e.charCodeAt(de)?(l="l",de++):(l=o,0===ge&&Ce(M)),l===o&&(104===e.charCodeAt(de)?(l="h",de++):(l=o,0===ge&&Ce(R))),l===o&&(l=null),l!==o?((s=Be())===o&&(s=null),s!==o?(he=r,r=t={type:"keep",highlow:l,expr:s||Qe}):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}function Fe(){var r,t,l,s;return r=de,100===e.charCodeAt(de)?(t="d",de++):(t=o,0===ge&&Ce(w)),t!==o?(108===e.charCodeAt(de)?(l="l",de++):(l=o,0===ge&&Ce(M)),l===o&&(104===e.charCodeAt(de)?(l="h",de++):(l=o,0===ge&&Ce(R))),l===o&&(l=null),l!==o?((s=Be())===o&&(s=null),s!==o?(he=r,r=t={type:"drop",highlow:l,expr:s||Qe}):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}function ke(){var r,t,l,s,n,u,a,c,i,d;if(r=de,(t=_e())!==o){for(l=[],s=de,(n=Le())!==o?(43===e.charCodeAt(de)?(u=F,de++):(u=o,0===ge&&Ce(k)),u!==o&&(a=Le())!==o&&(c=_e())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);s!==o;)l.push(s),s=de,(n=Le())!==o?(43===e.charCodeAt(de)?(u=F,de++):(u=o,0===ge&&Ce(k)),u!==o&&(a=Le())!==o&&(c=_e())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);l!==o?(he=r,i=t,r=t=0==(d=l).length?i:{head:i,type:"diceExpression",ops:d.map((e=>({type:"math",op:e[1],tail:e[3]})))}):(de=r,r=o)}else de=r,r=o;return r}function _e(){var e;return(e=je())===o&&(e=We()),e}function je(){var r,t,l;return r=de,t=function(){var r,t,l,s,n;if(r=de,t=function(){var r,t,l,s,n,u;if(r=de,t=function(){var r,t,l,s;return r=de,(t=Be())===o&&(t=null),t!==o?(100===e.charCodeAt(de)?(l="d",de++):(l=o,0===ge&&Ce(w)),l!==o?(s=function(){var r,t;return r=de,70===e.charCodeAt(de)?(t="F",de++):(t=o,0===ge&&Ce(I)),t===o&&(102===e.charCodeAt(de)?(t="f",de++):(t=o,0===ge&&Ce(y))),t!==o&&(he=r,t={type:"fate"}),t}(),s===o&&(s=function(){var r,t;return r=de,37===e.charCodeAt(de)?(t="%",de++):(t=o,0===ge&&Ce(B)),t!==o&&(he=r,t={type:"number",value:"100"}),t}(),s===o&&(s=Be())),s!==o?(he=r,r=t={die:s,count:t||{type:"number",value:1},type:"die"}):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}(),t!==o){for(l=[],(s=De())===o&&(s=Se())===o&&(s=Oe())===o&&(s=Ge())===o&&(s=Pe());s!==o;)l.push(s),(s=De())===o&&(s=Se())===o&&(s=Oe())===o&&(s=Ge())===o&&(s=Pe());l!==o?(he=r,u=l,(n=t).mods=(n.mods||[]).concat(u),r=t=n):(de=r,r=o)}else de=r,r=o;return r}(),t!==o){for(l=[],(s=Fe())===o&&(s=Ee())===o&&(s=Re())===o&&(s=we())===o&&(s=$e())===o&&(s=Te());s!==o;)l.push(s),(s=Fe())===o&&(s=Ee())===o&&(s=Re())===o&&(s=we())===o&&(s=$e())===o&&(s=Te());l!==o?((s=function(){var r,t,l,s,n;return r=de,109===e.charCodeAt(de)?(t="m",de++):(t=o,0===ge&&Ce(x)),t!==o?(116===e.charCodeAt(de)?(l="t",de++):(l=o,0===ge&&Ce(A)),l===o&&(l=null),l!==o?((s=He())===o&&(s=null),s!==o?(n=function(){var r,t,l;return r=de,62===e.charCodeAt(de)?(t=d,de++):(t=o,0===ge&&Ce(h)),t===o&&(60===e.charCodeAt(de)?(t=p,de++):(t=o,0===ge&&Ce(f)),t===o&&(61===e.charCodeAt(de)?(t=v,de++):(t=o,0===ge&&Ce(g)))),t!==o&&(l=Be())!==o?(he=r,r=t={mod:t,expr:l}):(de=r,r=o),r}(),n===o&&(n=null),n!==o?(he=r,r=t=function(e,r,t){const l={type:"match",min:r||{type:"number",value:2},count:!!e};return t&&(l.mod=t.mod,l.expr=t.expr),l}(l,s,n)):(de=r,r=o)):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}())===o&&(s=null),s!==o?(n=function(){var r,t,l;return r=de,115===e.charCodeAt(de)?(t="s",de++):(t=o,0===ge&&Ce(_)),t!==o?(97===e.charCodeAt(de)?(l="a",de++):(l=o,0===ge&&Ce(j)),l===o&&(100===e.charCodeAt(de)?(l="d",de++):(l=o,0===ge&&Ce(w))),l===o&&(l=null),l!==o?(he=r,r=t="d"==l?{type:"sort",asc:!1}:{type:"sort",asc:!0}):(de=r,r=o)):(de=r,r=o),r}(),n===o&&(n=null),n!==o?(he=r,r=t=function(e,r,t,l){const o=r.filter((e=>["success","failure"].includes(e.type)));return r=r.filter((e=>!o.includes(e))),e.mods=(e.mods||[]).concat(r),o.length>0&&(e.targets=o),t&&(e.match=t),l&&(e.sort=l),e}(t,l,s,n)):(de=r,r=o)):(de=r,r=o)):(de=r,r=o)}else de=r,r=o;return r}(),t!==o&&Le()!==o?((l=Je())===o&&(l=null),l!==o?(he=r,r=t=i(t,l)):(de=r,r=o)):(de=r,r=o),r}function Oe(){var r,t,l;return r=de,33===e.charCodeAt(de)?(t="!",de++):(t=o,0===ge&&Ce(O)),t!==o?((l=Ie())===o&&(l=null),l!==o?(he=r,r=t={type:"explode",target:l}):(de=r,r=o)):(de=r,r=o),r}function De(){var r,t,l;return r=de,"!!"===e.substr(de,2)?(t="!!",de+=2):(t=o,0===ge&&Ce(D)),t!==o?((l=Ie())===o&&(l=null),l!==o?(he=r,r=t={type:"compound",target:l}):(de=r,r=o)):(de=r,r=o),r}function Se(){var r,t,l;return r=de,"!p"===e.substr(de,2)?(t="!p",de+=2):(t=o,0===ge&&Ce(S)),t!==o?((l=Ie())===o&&(l=null),l!==o?(he=r,r=t={type:"penetrate",target:l}):(de=r,r=o)):(de=r,r=o),r}function Pe(){var r,t,l;return r=de,114===e.charCodeAt(de)?(t="r",de++):(t=o,0===ge&&Ce(P)),t!==o?((l=Ie())===o&&(l=null),l!==o?(he=r,r=t={type:"reroll",target:l||Ne}):(de=r,r=o)):(de=r,r=o),r}function Ge(){var r,t,l;return r=de,"ro"===e.substr(de,2)?(t="ro",de+=2):(t=o,0===ge&&Ce(G)),t!==o?((l=Ie())===o&&(l=null),l!==o?(he=r,r=t={type:"rerollOnce",target:l||Ne}):(de=r,r=o)):(de=r,r=o),r}function Ie(){var r,t,l;return r=de,62===e.charCodeAt(de)?(t=d,de++):(t=o,0===ge&&Ce(h)),t===o&&(60===e.charCodeAt(de)?(t=p,de++):(t=o,0===ge&&Ce(f)),t===o&&(61===e.charCodeAt(de)?(t=v,de++):(t=o,0===ge&&Ce(g)))),t===o&&(t=null),t!==o&&(l=Be())!==o?(he=r,r=t={type:"target",mod:t,value:l}):(de=r,r=o),r}function Be(){var e;return(e=Ke())===o&&(e=He()),e}function We(){var r;return(r=function(){var r,t,l,s;return r=de,"[["===e.substr(de,2)?(t="[[",de+=2):(t=o,0===ge&&Ce(a)),t!==o&&(l=We())!==o?("]]"===e.substr(de,2)?(s="]]",de+=2):(s=o,0===ge&&Ce(c)),s!==o?(he=r,r=t={type:"inline",expr:l}):(de=r,r=o)):(de=r,r=o),r}())===o&&(r=Ue())===o&&(r=Ke()),r}function Ke(){var r,t,l,s,n,u,a;return r=de,40===e.charCodeAt(de)?(t="(",de++):(t=o,0===ge&&Ce(W)),t!==o&&(l=Ue())!==o?(41===e.charCodeAt(de)?(s=")",de++):(s=o,0===ge&&Ce(K)),s!==o&&Le()!==o?((n=Je())===o&&(n=null),n!==o?(he=r,u=l,(a=n)&&(u.label=a),r=t=u):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}function Ue(){var r,t,l,s,n,u,a,c;if(r=de,(t=ze())!==o){for(l=[],s=de,(n=Le())!==o?(43===e.charCodeAt(de)?(u=F,de++):(u=o,0===ge&&Ce(k)),u===o&&(45===e.charCodeAt(de)?(u="-",de++):(u=o,0===ge&&Ce(U))),u!==o&&(a=Le())!==o&&(c=ze())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);s!==o;)l.push(s),s=de,(n=Le())!==o?(43===e.charCodeAt(de)?(u=F,de++):(u=o,0===ge&&Ce(k)),u===o&&(45===e.charCodeAt(de)?(u="-",de++):(u=o,0===ge&&Ce(U))),u!==o&&(a=Le())!==o&&(c=ze())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);l!==o?(he=r,r=t=z(t,l)):(de=r,r=o)}else de=r,r=o;return r}function ze(){var r,t,l,s,n,u,a,c;if(r=de,(t=Ve())!==o){for(l=[],s=de,(n=Le())!==o?(42===e.charCodeAt(de)?(u="*",de++):(u=o,0===ge&&Ce(V)),u===o&&(47===e.charCodeAt(de)?(u="/",de++):(u=o,0===ge&&Ce(q))),u!==o&&(a=Le())!==o&&(c=Ve())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);s!==o;)l.push(s),s=de,(n=Le())!==o?(42===e.charCodeAt(de)?(u="*",de++):(u=o,0===ge&&Ce(V)),u===o&&(47===e.charCodeAt(de)?(u="/",de++):(u=o,0===ge&&Ce(q))),u!==o&&(a=Le())!==o&&(c=Ve())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);l!==o?(he=r,r=t=z(t,l)):(de=r,r=o)}else de=r,r=o;return r}function Ve(){var r,t,l,s,n,u,a,c;if(r=de,(t=qe())!==o){for(l=[],s=de,(n=Le())!==o?(e.substr(de,2)===H?(u=H,de+=2):(u=o,0===ge&&Ce(J)),u===o&&(37===e.charCodeAt(de)?(u="%",de++):(u=o,0===ge&&Ce(B))),u!==o&&(a=Le())!==o&&(c=qe())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);s!==o;)l.push(s),s=de,(n=Le())!==o?(e.substr(de,2)===H?(u=H,de+=2):(u=o,0===ge&&Ce(J)),u===o&&(37===e.charCodeAt(de)?(u="%",de++):(u=o,0===ge&&Ce(B))),u!==o&&(a=Le())!==o&&(c=qe())!==o?s=n=[n,u,a,c]:(de=s,s=o)):(de=s,s=o);l!==o?(he=r,r=t=z(t,l)):(de=r,r=o)}else de=r,r=o;return r}function qe(){var r;return(r=function(){var r,t,l,s,n;return r=de,t=function(){var r;return e.substr(de,5)===L?(r=L,de+=5):(r=o,0===ge&&Ce(N)),r===o&&(e.substr(de,4)===Q?(r=Q,de+=4):(r=o,0===ge&&Ce(X)),r===o&&(e.substr(de,5)===Y?(r=Y,de+=5):(r=o,0===ge&&Ce(Z)),r===o&&("abs"===e.substr(de,3)?(r="abs",de+=3):(r=o,0===ge&&Ce(ee))))),r}(),t!==o&&Le()!==o?(40===e.charCodeAt(de)?(l="(",de++):(l=o,0===ge&&Ce(W)),l!==o&&Le()!==o&&(s=Ue())!==o&&Le()!==o?(41===e.charCodeAt(de)?(n=")",de++):(n=o,0===ge&&Ce(K)),n!==o?(he=r,r=t={type:"mathfunction",op:t,expr:s}):(de=r,r=o)):(de=r,r=o)):(de=r,r=o),r}())===o&&(r=function(){var r,t,l;return r=de,t=function(){var r,t,l,s,n,u,a,c;if(r=de,t=function(){var r,t,l,s,n,u,a,c,i;if(r=de,123===e.charCodeAt(de)?(t="{",de++):(t=o,0===ge&&Ce(T)),t!==o)if(Le()!==o)if((l=ke())!==o){for(s=[],n=de,(u=Le())!==o?(44===e.charCodeAt(de)?(a=",",de++):(a=o,0===ge&&Ce($)),a!==o&&(c=Le())!==o&&(i=ke())!==o?n=u=[u,a,c,i]:(de=n,n=o)):(de=n,n=o);n!==o;)s.push(n),n=de,(u=Le())!==o?(44===e.charCodeAt(de)?(a=",",de++):(a=o,0===ge&&Ce($)),a!==o&&(c=Le())!==o&&(i=ke())!==o?n=u=[u,a,c,i]:(de=n,n=o)):(de=n,n=o);s!==o&&(n=Le())!==o?(125===e.charCodeAt(de)?(u="}",de++):(u=o,0===ge&&Ce(E)),u!==o?(he=r,r=t={rolls:[l,...s.map((e=>e[3]))],type:"group"}):(de=r,r=o)):(de=r,r=o)}else de=r,r=o;else de=r,r=o;else de=r,r=o;return r}(),t!==o){for(l=[],(s=Ee())===o&&(s=Fe())===o&&(s=Re())===o&&(s=we());s!==o;)l.push(s),(s=Ee())===o&&(s=Fe())===o&&(s=Re())===o&&(s=we());l!==o&&(s=Le())!==o?((n=Je())===o&&(n=null),n!==o?(he=r,u=t,c=n,(a=l).length>0&&(u.mods=(u.mods||[]).concat(a)),c&&(u.label=c),r=t=u):(de=r,r=o)):(de=r,r=o)}else de=r,r=o;return r}(),t===o&&(t=je())===o&&(t=He()),t!==o&&Le()!==o?((l=Je())===o&&(l=null),l!==o?(he=r,r=t=i(t,l)):(de=r,r=o)):(de=r,r=o),r}())===o&&(r=Ke()),r}function He(){var r,t,l,s;if(ge++,r=de,45===e.charCodeAt(de)?(t="-",de++):(t=o,0===ge&&Ce(U)),t===o&&(t=null),t!==o){if(l=[],te.test(e.charAt(de))?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(le)),s!==o)for(;s!==o;)l.push(s),te.test(e.charAt(de))?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(le));else l=o;l!==o?(he=r,r=t={type:"number",value:parseInt(e.substring(he,de),10)}):(de=r,r=o)}else de=r,r=o;return ge--,r===o&&(t=o,0===ge&&Ce(re)),r}function Je(){var r,t,l,s;if(r=de,91===e.charCodeAt(de)?(t="[",de++):(t=o,0===ge&&Ce(oe)),t!==o){if(l=[],se.test(e.charAt(de))?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(ne)),s!==o)for(;s!==o;)l.push(s),se.test(e.charAt(de))?(s=e.charAt(de),de++):(s=o,0===ge&&Ce(ne));else l=o;l!==o?(93===e.charCodeAt(de)?(s="]",de++):(s=o,0===ge&&Ce(ue)),s!==o?(he=r,r=t=l.join("")):(de=r,r=o)):(de=r,r=o)}else de=r,r=o;return r}function Le(){var r,t;for(ge++,r=[],ce.test(e.charAt(de))?(t=e.charAt(de),de++):(t=o,0===ge&&Ce(ie));t!==o;)r.push(t),ce.test(e.charAt(de))?(t=e.charAt(de),de++):(t=o,0===ge&&Ce(ie));return ge--,r===o&&(t=o,0===ge&&Ce(ae)),r}const Ne={type:"target",mod:"=",value:{type:"number",value:1}},Qe={type:"number",value:1};if((l=n())!==o&&de===e.length)return l;throw l!==o&&de<e.length&&Ce({type:"end"}),Xe=ve,Ye=fe<e.length?e.charAt(fe):null,Ze=fe<e.length?Ae(fe,fe+1):Ae(fe,fe),new r(r.buildMessage(Xe,Ye),Xe,Ye,Ze);var Xe,Ye,Ze}}}},r={};return function t(l){var o=r[l];if(void 0!==o)return o.exports;var s=r[l]={exports:{}};return e[l].call(s.exports,s,s.exports,t),s.exports}(607)})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,